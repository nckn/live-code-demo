{"id":"js/shader/vertex.glsl","dependencies":[{"name":"/Users/akella/package.json","includedInParent":true,"mtime":1625327502542}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform vec4 corners;\\nuniform float zoomState;\\nvarying vec2 vUv;\\nvarying vec2 vfinalUV;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nuniform vec4 uResolution;\\nuniform vec2 uSize;\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize){\\n  float quadAspect = quadSize.x/quadSize.y;\\n  float textureAspect = textureSize.x/textureSize.y;\\n  vec2 tempUV = uv - vec2(0.5);\\n  if(quadAspect<textureAspect){\\n\\t  tempUV = tempUV*vec2(quadAspect/textureAspect,1.);\\n  } else{\\n\\t  tempUV = tempUV*vec2(1.,textureAspect/quadAspect);\\n  }\\n  tempUV += vec2(0.5);\\n  return tempUV;\\n\\n}\\n\\nfloat PI = 3.141592653589793238;\\n// @todo sway left-right on hover mousemove\\n// ++@todo ++corners animation\\n// ++@wave animation - find example - aristide? https://weare.tm/work/anthem this wave\\n\\nvoid main() {\\n  float wave = sin(PI*zoomState);\\n  float dist = wave*wave*wave*0.2*sin(5.*length(uv+vec2(0.5) + zoomState));\\n  \\n  float _corners = mix(mix(corners.z, corners.w, uv.x), mix(corners.x, corners.y, uv.x), uv.y);\\n  vUv = uv;\\n  vSize = vec2(0.);\\n  vec2 newUV = vUv;\\n  vec2 fullScreenUV = getUV(vUv,uSize,uResolution.xy);\\n  vfinalUV = mix(newUV,fullScreenUV, zoomState);\\n  vfinalUV = newUV;\\n  float zoomY = uResolution.y/uSize.y;\\n  float zoomX = uResolution.x/uSize.x;\\n\\n  vec4 _list = modelMatrix * vec4(position, 1.0);\\n  vec4 _slide = vec4(position, 1.0);\\n\\n  _slide.y *=uResolution.y;\\n  _slide.x *=uResolution.x;\\n  _slide.z +=zoomState*1.;\\n\\n  vSize = mix(uSize,uResolution.xy,zoomState);\\n  // _slide.z+=zoomState*130.;\\n  // gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n  // gl_Position = projectionMatrix * viewMatrix * mix(_list, _slide, zoomState + dist);\\n  gl_Position = projectionMatrix * viewMatrix * mix(_list, _slide, _corners);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1870},"source":"js/shader/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform vec4 corners;\\nuniform float zoomState;\\nvarying vec2 vUv;\\nvarying vec2 vfinalUV;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nuniform vec4 uResolution;\\nuniform vec2 uSize;\\nvarying vec2 vSize;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize){\\n  float quadAspect = quadSize.x/quadSize.y;\\n  float textureAspect = textureSize.x/textureSize.y;\\n  vec2 tempUV = uv - vec2(0.5);\\n  if(quadAspect<textureAspect){\\n\\t  tempUV = tempUV*vec2(quadAspect/textureAspect,1.);\\n  } else{\\n\\t  tempUV = tempUV*vec2(1.,textureAspect/quadAspect);\\n  }\\n  tempUV += vec2(0.5);\\n  return tempUV;\\n\\n}\\n\\nfloat PI = 3.141592653589793238;\\n// @todo sway left-right on hover mousemove\\n// ++@todo ++corners animation\\n// ++@wave animation - find example - aristide? https://weare.tm/work/anthem this wave\\n\\nvoid main() {\\n  float wave = sin(PI*zoomState);\\n  float dist = wave*wave*wave*0.2*sin(5.*length(uv+vec2(0.5) + zoomState));\\n  \\n  float _corners = mix(mix(corners.z, corners.w, uv.x), mix(corners.x, corners.y, uv.x), uv.y);\\n  vUv = uv;\\n  vSize = vec2(0.);\\n  vec2 newUV = vUv;\\n  vec2 fullScreenUV = getUV(vUv,uSize,uResolution.xy);\\n  vfinalUV = mix(newUV,fullScreenUV, zoomState);\\n  vfinalUV = newUV;\\n  float zoomY = uResolution.y/uSize.y;\\n  float zoomX = uResolution.x/uSize.x;\\n\\n  vec4 _list = modelMatrix * vec4(position, 1.0);\\n  vec4 _slide = vec4(position, 1.0);\\n\\n  _slide.y *=uResolution.y;\\n  _slide.x *=uResolution.x;\\n  _slide.z +=zoomState*1.;\\n\\n  vSize = mix(uSize,uResolution.xy,zoomState);\\n  // _slide.z+=zoomState*130.;\\n  // gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n  // gl_Position = projectionMatrix * viewMatrix * mix(_list, _slide, zoomState + dist);\\n  gl_Position = projectionMatrix * viewMatrix * mix(_list, _slide, _corners);\\n}\";"},"lineCount":null}},"error":null,"hash":"822ce687e293a12abee61d503927847d","cacheData":{"env":{}}}