{"id":"Yv4M","dependencies":[{"name":"/Users/akella/package.json","includedInParent":true,"mtime":1625327502542}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform float zoomState;\\nuniform sampler2D uImage;\\nuniform vec4 uResolution;\\nvarying vec2 vUv;\\nuniform vec2 uSize;\\nvarying vec3 vPosition;\\nvarying vec2 vfinalUV;\\nvarying vec2 vSize;\\nfloat PI = 3.141592653589793238;\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize){\\n  float quadAspect = quadSize.x/quadSize.y;\\n  float textureAspect = textureSize.x/textureSize.y;\\n  vec2 tempUV = uv - vec2(0.5);\\n  if(quadAspect<textureAspect){\\n\\t  tempUV = tempUV*vec2(quadAspect/textureAspect,1.);\\n  } else{\\n\\t  tempUV = tempUV*vec2(1.,textureAspect/quadAspect);\\n  }\\n  tempUV += vec2(0.5);\\n  return tempUV;\\n\\n}\\nvoid main()\\t{\\n\\t// vec2 newUV = (vUv - vec2(0.5))*uResolution.zw + vec2(0.5);\\n\\t// vec2 newUV = vUv;\\n\\t// vec2 fullScreenUV = getUV(vUv,uSize,uResolution.xy);\\n\\tvec2 last = getUV(vUv,uSize,vSize);\\n\\t// vec2 finalUV = mix(newUV,fullScreenUV, zoomState);\\n\\t// vec4 t = mix(texture(uImage,finalUV),texture(uImage,fullScreenUV),zoomState);\\n\\tvec4 t = texture(uImage,last);\\n\\tgl_FragColor = vec4(vUv,0.0,1.);\\n\\tgl_FragColor = t;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1139},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform float zoomState;\\nuniform sampler2D uImage;\\nuniform vec4 uResolution;\\nvarying vec2 vUv;\\nuniform vec2 uSize;\\nvarying vec3 vPosition;\\nvarying vec2 vfinalUV;\\nvarying vec2 vSize;\\nfloat PI = 3.141592653589793238;\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize){\\n  float quadAspect = quadSize.x/quadSize.y;\\n  float textureAspect = textureSize.x/textureSize.y;\\n  vec2 tempUV = uv - vec2(0.5);\\n  if(quadAspect<textureAspect){\\n\\t  tempUV = tempUV*vec2(quadAspect/textureAspect,1.);\\n  } else{\\n\\t  tempUV = tempUV*vec2(1.,textureAspect/quadAspect);\\n  }\\n  tempUV += vec2(0.5);\\n  return tempUV;\\n\\n}\\nvoid main()\\t{\\n\\t// vec2 newUV = (vUv - vec2(0.5))*uResolution.zw + vec2(0.5);\\n\\t// vec2 newUV = vUv;\\n\\t// vec2 fullScreenUV = getUV(vUv,uSize,uResolution.xy);\\n\\tvec2 last = getUV(vUv,uSize,vSize);\\n\\t// vec2 finalUV = mix(newUV,fullScreenUV, zoomState);\\n\\t// vec4 t = mix(texture(uImage,finalUV),texture(uImage,fullScreenUV),zoomState);\\n\\tvec4 t = texture(uImage,last);\\n\\tgl_FragColor = vec4(vUv,0.0,1.);\\n\\tgl_FragColor = t;\\n}\";"},"lineCount":null}},"error":null,"hash":"a469da33687a231b4f1f88eecac49112","cacheData":{"env":{}}}